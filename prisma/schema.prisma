// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model
model User {
  id             String   @id @default(uuid()) @db.Uuid
  email          String   @unique
  passwordHash   String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  isActive       Boolean  @default(true)
  role           String   @default("user")

  // Relations
  oauthProviders  OAuthProvider[]
  passwordResetTokens PasswordResetToken[]
  userSessions    UserSession[]
}

// OAuthProvider model
model OAuthProvider {
  id                String   @id @default(uuid()) @db.Uuid
  userId            String   @db.Uuid
  provider          String
  providerUserId    String
  accessToken       String?
  refreshToken      String?
  expiresAt         DateTime?

  // Relations
  user              User     @relation(fields: [userId], references: [id])
}

// PasswordResetToken model
model PasswordResetToken {
  id          String   @id @default(uuid()) @db.Uuid
  userId      String   @db.Uuid
  token       String   @unique
  createdAt   DateTime @default(now())
  expiresAt   DateTime?

  // Relations
  user        User     @relation(fields: [userId], references: [id])
}

// UserSession model
model UserSession {
  id          String   @id @default(uuid()) @db.Uuid
  userId      String   @db.Uuid
  sessionToken String   @unique
  createdAt   DateTime @default(now())
  expiresAt   DateTime?
  ipAddress   String?
  userAgent   String?

  // Relations
  user        User     @relation(fields: [userId], references: [id])
}