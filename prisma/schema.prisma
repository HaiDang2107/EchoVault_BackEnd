generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String               @id @default(uuid()) @db.Uuid
  email               String               @unique
  displayName         String?              // Added: User-friendly name
  avatar              String?              // Added: Profile image URL
  timezone            String?
  passwordHash        String?
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  isActive            Boolean              @default(true)
  role                String               @default("user")

  //Reactions
  comments            CapsuleComments[]
  capsuleContributors CapsuleContributor[]
  capsuleMedia        CapsuleMedia[]
  reactions           CapsuleReactions[]
  capsuleViewers      CapsuleViewer[]
  userFriend          Friend[]             @relation("FriendsOfUser")
  friends             Friend[]             @relation("UserFriends")
  notifications       Notifications[]
  oauthProviders      OAuthProvider[]
  passwordResetTokens PasswordResetToken[]
  UserLogs            UserLogs[]
  userSessions        UserSession[]
  sentRequests    FriendRequest[] @relation("SentFriendRequests")
  receivedRequests FriendRequest[] @relation("ReceivedFriendRequests")
}

model OAuthProvider {
  id             String    @id @default(uuid()) @db.Uuid
  userId         String    @db.Uuid
  provider       String
  providerUserId String
  accessToken    String?
  refreshToken   String?
  expiresAt      DateTime?

  //Reactions
  user           User      @relation(fields: [userId], references: [id])

  @@unique([provider, providerUserId])
}

model PasswordResetToken {
  id        String    @id @default(uuid()) @db.Uuid
  userId    String    @db.Uuid
  token     String    @unique
  createdAt DateTime  @default(now())
  expiresAt DateTime?

  //Reactions
  user      User      @relation(fields: [userId], references: [id])
}

model UserSession {
  id           String    @id @default(uuid()) @db.Uuid
  userId       String    @db.Uuid
  sessionToken String    @unique
  createdAt    DateTime  @default(now())
  expiresAt    DateTime?
  ipAddress    String?
  userAgent    String?

  //Reactions
  user         User      @relation(fields: [userId], references: [id])
}

model FriendRequest {
  id          String     @id @default(uuid())
  senderId    String     @db.Uuid
  receiverId  String     @db.Uuid
  status      RequestStatus @default(PENDING)
  createdAt   DateTime   @default(now())

  receiver    User       @relation("ReceivedFriendRequests", fields: [receiverId], references: [id])
  sender      User       @relation("SentFriendRequests", fields: [senderId], references: [id])


  @@unique([senderId, receiverId]) // Ensures one request per pair
}

enum RequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}

model Friend {
  id       String @id @default(uuid()) @db.Uuid
  userId   String @db.Uuid
  friendId String @db.Uuid

  //Reactions
  friend   User   @relation("FriendsOfUser", fields: [friendId], references: [id])
  user     User   @relation("UserFriends", fields: [userId], references: [id])

  @@unique([userId, friendId])
}

model Capsule {
  id                   String              @id @default(uuid()) @db.Uuid
  userId               String              @db.Uuid
  openingTime          DateTime
  content              String
  theme                String
  description          String
  notificationInterval Int
  status               String              @default("Locked")
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @default(now())
  privacy              String              @default("Public")

  //Reactions
  comments             CapsuleComments[]
  contributors         CapsuleContributor[]
  capsuleMedia         CapsuleMedia[]
  reactions            CapsuleReactions[]
  viewers              CapsuleViewer[]
  notifications        Notifications[]
  recallQuestions      RecallQuestion[]

  
}

model CapsuleContributor {
  id        String     @id @default(uuid()) @db.Uuid
  capsuleId String     @db.Uuid
  userId    String     @db.Uuid

  //Reactions
  capsule   Capsule @relation(fields: [capsuleId], references: [id])
  user      User    @relation(fields: [userId], references: [id])

  @@unique([capsuleId, userId])
}

model CapsuleViewer {
  id        String  @id @default(uuid()) @db.Uuid
  capsuleId String  @db.Uuid
  userId    String  @db.Uuid

  //Reactions
  capsule   Capsule @relation(fields: [capsuleId], references: [id])
  user      User    @relation(fields: [userId], references: [id])

  @@unique([capsuleId, userId])
}

model CapsuleMedia {
  mediaId    String   @id @default(uuid()) @db.Uuid
  capsuleId  String   @db.Uuid
  mediaUrl   String
  mediaType  String
  uploadedBy String   @db.Uuid
  uploadedAt DateTime @default(now())
  metadata   Json?

  //Reactions
  capsule    Capsule  @relation(fields: [capsuleId], references: [id])
  user       User     @relation(fields: [uploadedBy], references: [id])
}

model RecallQuestion {
  id            String  @id @default(uuid()) @db.Uuid
  capsuleId     String  @db.Uuid
  question      String
  choicesA      String
  choicesB      String
  choicesC      String
  choicesD      String
  correctAnswer String
  explaination  String

  //Reactions
  capsule       Capsule @relation(fields: [capsuleId], references: [id])
}

model CapsuleComments {
  commentId   String   @id @default(uuid()) @db.Uuid
  capsuleId   String   @db.Uuid
  userId      String   @db.Uuid
  commentText String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  //Reactions
  capsule     Capsule  @relation(fields: [capsuleId], references: [id])
  user        User     @relation(fields: [userId], references: [id])
}

model CapsuleReactions {
  reactionId   String   @id @default(uuid()) @db.Uuid
  capsuleId    String   @db.Uuid
  userId       String   @db.Uuid
  reactionType String
  createdAt    DateTime @default(now())

  //Reactions
  capsule      Capsule  @relation(fields: [capsuleId], references: [id])
  user         User     @relation(fields: [userId], references: [id])

  @@unique([capsuleId, userId])
}

model Notifications {
  notificationId   String   @id @default(uuid()) @db.Uuid
  userId           String   @db.Uuid
  capsuleId        String?  @db.Uuid
  notificationType String
  message          String
  isRead           Boolean  @default(false)
  createdAt        DateTime @default(now())

  //Reactions
  capsule          Capsule? @relation(fields: [capsuleId], references: [id])
  user             User     @relation(fields: [userId], references: [id])
}

model UserLogs {
  log_id            Int      @id @default(autoincrement()) @map("log_id") // Removed extra quotes
  user_id           String?  @map("user_id") @db.Uuid // Removed extra quotes
  capsule_id        String?  @map("capsule_id") @db.Uuid // Removed extra quotes
  log_action        String   @map("log_action") @db.VarChar(50) // Removed extra quotes
  log_timestamp     DateTime @default(now()) @map("log_timestamp") @db.Timestamp(6) // Removed extra quotes
  User              User?    @relation(fields: [user_id], references: [id], onUpdate: NoAction, map: "logs_user_id_fkey")
}
